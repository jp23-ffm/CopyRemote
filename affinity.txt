import csv
from django.core.management.base import BaseCommand
from yourapp.models import Server  # Remplace 'yourapp' par le nom de ton app


class Command(BaseCommand):
    help = 'Met à jour les valeurs affinity des serveurs depuis un fichier CSV'

    def add_arguments(self, parser):
        parser.add_argument(
            'csv_file',
            type=str,
            help='Chemin vers le fichier CSV contenant server_id et affinity'
        )

    def handle(self, *args, **options):
        csv_file_path = options['csv_file']
        
        updated_count = 0
        not_found_count = 0
        error_count = 0
        
        try:
            with open(csv_file_path, 'r', encoding='utf-8') as file:
                # Utilise DictReader pour lire le CSV avec les en-têtes
                reader = csv.DictReader(file)
                
                for row in reader:
                    server_id = row.get('server_id', '').strip()
                    affinity = row.get('affinity', '').strip()
                    
                    if not server_id:
                        self.stdout.write(
                            self.style.WARNING(f'Ligne ignorée : server_id manquant')
                        )
                        continue
                    
                    try:
                        # Recherche le serveur par son ID
                        server = Server.objects.get(id=server_id)
                        
                        # Met à jour l'affinity
                        server.affinity = affinity
                        server.save()
                        
                        updated_count += 1
                        self.stdout.write(
                            self.style.SUCCESS(f'✓ Server {server_id}: affinity mise à jour')
                        )
                        
                    except Server.DoesNotExist:
                        not_found_count += 1
                        self.stdout.write(
                            self.style.WARNING(f'✗ Server {server_id}: non trouvé dans la base')
                        )
                    
                    except Exception as e:
                        error_count += 1
                        self.stdout.write(
                            self.style.ERROR(f'✗ Erreur pour server {server_id}: {str(e)}')
                        )
            
            # Résumé
            self.stdout.write(self.style.SUCCESS('\n=== RÉSUMÉ ==='))
            self.stdout.write(f'Serveurs mis à jour: {updated_count}')
            self.stdout.write(f'Serveurs non trouvés: {not_found_count}')
            self.stdout.write(f'Erreurs: {error_count}')
            
        except FileNotFoundError:
            self.stdout.write(
                self.style.ERROR(f'Fichier non trouvé: {csv_file_path}')
            )
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'Erreur lors de la lecture du fichier: {str(e)}')
            )
			
--------------

   yourapp/management/commands/import_affinity.py
   
  server_id,affinity
   1,zone-a
   2,zone-b
   3,zone-a  
   

python manage.py import_affinity chemin/vers/ton/fichier.csv

Alternative avec bulk_update (plus performant pour beaucoup de données) :

servers_to_update = []

for row in reader:
    server_id = row.get('server_id', '').strip()
    affinity = row.get('affinity', '').strip()
    
    try:
        server = Server.objects.get(id=server_id)
        server.affinity = affinity
        servers_to_update.append(server)
    except Server.DoesNotExist:
        not_found_count += 1

# Mise à jour en masse
Server.objects.bulk_update(servers_to_update, ['affinity'])


------------------


import csv
import json
from django.core.management.base import BaseCommand
from yourapp.models import Server  # Remplace 'yourapp' par le nom de ton app


class Command(BaseCommand):
    help = 'Importe les serveurs depuis JSON et met à jour les affinities depuis CSV'

    def add_arguments(self, parser):
        parser.add_argument(
            'json_file',
            type=str,
            help='Chemin vers le fichier JSON des serveurs'
        )
        parser.add_argument(
            'csv_file',
            type=str,
            help='Chemin vers le fichier CSV contenant server_id et affinity'
        )

    def handle(self, *args, **options):
        json_file_path = options['json_file']
        csv_file_path = options['csv_file']
        
        # ÉTAPE 1 : Import des données JSON
        self.stdout.write(self.style.SUCCESS('\n=== IMPORT JSON ==='))
        self.import_json(json_file_path)
        
        # ÉTAPE 2 : Mise à jour des affinities depuis CSV
        self.stdout.write(self.style.SUCCESS('\n=== MISE À JOUR AFFINITIES ==='))
        self.update_affinities(csv_file_path)
    
    def import_json(self, json_file_path):
        """Ton code d'import JSON existant"""
        try:
            with open(json_file_path, 'r', encoding='utf-8') as file:
                data = json.load(file)
                
                # Ton code d'import JSON ici
                # Par exemple :
                # for server_data in data:
                #     Server.objects.update_or_create(
                #         id=server_data['id'],
                #         defaults=server_data
                #     )
                
                self.stdout.write(
                    self.style.SUCCESS('✓ Import JSON terminé')
                )
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'Erreur import JSON: {str(e)}')
            )
    
    def update_affinities(self, csv_file_path):
    def update_affinities(self, csv_file_path):
        """Met à jour les affinities avec bulk_update pour de meilleures performances"""
        updated_count = 0
        not_found_count = 0
        servers_to_update = []
        
        try:
            with open(csv_file_path, 'r', encoding='utf-8') as file:
                reader = csv.DictReader(file)
                
                for row in reader:
                    server_id = row.get('server_id', '').strip()
                    affinity = row.get('affinity', '').strip()
                    
                    if not server_id:
                        continue
                    
                    try:
                        server = Server.objects.get(id=server_id)
                        server.affinity = affinity
                        servers_to_update.append(server)
                        
                    except Server.DoesNotExist:
                        not_found_count += 1
                        self.stdout.write(
                            self.style.WARNING(f'✗ Server {server_id}: non trouvé')
                        )
            
            # Mise à jour en masse (plus performant)
            if servers_to_update:
                Server.objects.bulk_update(servers_to_update, ['affinity'])
                updated_count = len(servers_to_update)
            
            # Résumé
            self.stdout.write(self.style.SUCCESS('\n=== RÉSUMÉ AFFINITIES ==='))
            self.stdout.write(f'Serveurs mis à jour: {updated_count}')
            self.stdout.write(f'Serveurs non trouvés: {not_found_count}')
            
        except FileNotFoundError:
            self.stdout.write(
                self.style.ERROR(f'Fichier CSV non trouvé: {csv_file_path}')
            )
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'Erreur lecture CSV: {str(e)}')
            )